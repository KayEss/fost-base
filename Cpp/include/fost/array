/*
    Copyright 2015, Felspar Co Ltd. http://support.felspar.com/
    Distributed under the Boost Software License, Version 1.0.
    See accompanying file LICENSE_1_0.txt or copy at
        http://www.boost.org/LICENSE_1_0.txt
*/


#pragma once


#include <fost/core>


namespace fostlib {


    /// A non-owning view of part of an array of V
    template<typename V>
    class array_view {
        const V *m_data;
        std::size_t m_size;
    public:
        /// The underlying pointer type
        using pointer_type = const V*;

        /// Construct from a vector like collection that has data and size
        /// members
        array_view(const std::vector<V> &v)
        : m_data(v.data()), m_size(v.size()) {
        }
        template<std::size_t N>
        array_view(const std::array<V, N> &v)
        : m_data(v.data()), m_size(N) {
        }
        /// Construct from an array
        array_view(const V *a, std::size_t items)
        : m_data(a), m_size(items) {
        }

        /// The start of the data array
        pointer_type data() const {
            return m_data;
        }
        /// The number of items in the array
        std::size_t size() const {
            return m_size;
        }

        /// Index into the arraay
        const V &operator [] (std::size_t index) {
            return data()[index];
        }

        /// Constant iterator
        using const_iterator = const V *;
        /// Start iterator
        const_iterator begin() const {
            return data();
        }
        /// End iterator
        const_iterator end() const {
            return data() + size();
        }

        /// Reverse const iterator
        using const_reverse_iterator = std::reverse_iterator<const_iterator>;
        /// Start at the end
        const_reverse_iterator rbegin() const {
            return const_reverse_iterator(end());
        }
        /// End at the beginning
        const_reverse_iterator rend() const {
            return const_reverse_iterator(begin());
        }
    };


}

