2014-09-06  Kirit Saelensminde  <kirit@felspar.com>
 Allow `fostlib::future<>` instances to be compared for equality.
 The meta data set on the progress for a task is now made available to the meter readings.

2014-08-30  Kirit Saelensminde  <kirit@felspar.com>
 The `fostlib::accessors` now use perfect forwarding if `FOST_HAS_MOVE` is defined.

2014-08-16  Kirit Saelensminde  <kirit@felspar.com>
 Need to not pretty print the JSON values when showing the full settings database as we're outputting something approximating a CSV file.

2014-06-02  Kirit Saelensminde  <kirit@felspar.com>
 Allow a `timestamp` to be coerced to a `boost::filesystem::wpath` with a file system friendly string.
 Make the last parameter to `replace_all` default to `fostlib::null`.

2014-05-31  Kirit Saelensminde  <kirit@felspar.com>
 Redesign the way that threads are handled to try to improve reliability when things go wrong, especially with C++11.
 Change the output streaming for `fostlib::string` to use the underlying platform implementation.
 Try to set BOOST_SPIRIT_THREADSAFE to see if this makes a difference to thread problems associated with Boost Spirit.

2014-05-30  Kirit Saelensminde  <kirit@felspar.com>
 Fix a bug in the stdout logger sink which caused it to crash the logging when a log level was set.
 Add C++11 move constructors to `fostlib::detail::log_object` (used for creation of log messages).
 Extend the build system to support an optional requirements.jam that can be used to inject project requirements across all projects in a build.

2014-05-19  Kirit Saelensminde  <kirit@felspar.com>
 Change the way that `boost::filesystem::wpath` instances are converted from strings in order to fix a Boost bug on Android.

2014-05-16  Kirit Saelensminde  <kirit@felspar.com>
 Add in a JSON setting store, `fostlib::settings`. Add `-j` default command line switch so that it can be used rather than an INI file.

2014-05-09  Kirit Saelensminde  <kirit@felspar.com>
 Use Boost UUID library starting with version 1.42.
 Fix a bug where bounds checking cause a build failure on platforms with unsigned char.

2014-03-21  Kirit Saelensminde  <kirit@felspar.com>
 Coercion from larger to smaller ints requires different implementations for signed and unsigned types. Silences a warning about a comparison always being true when an unsigned value is compared with zero.
 Fixed another gcc warning for later versions of Boost about unused typedefs.

2014-02-28  Kirit Saelensminde  <kirit@felspar.com>
 Allow dates to have days added and subtracted from them.
 Add `today` member to `fostlib::date`.

2014-02-27  Kirit Saelensminde  <kirit@felspar.com>
 Added a new `split` member to jcursor to allow one to be created by splitting up a single string.

2014-01-14  Kirit Saelensminde  <kirit@felspar.com>
 Fix some warnings for a couple of compilers.

2014-01-12  Kirit Saelensminde  <kirit@felspar.com>
 If clang is on the path for Linux then use that in preference to gcc
 Extend the `fostlib::timestamp` and `fostlib::date` interfaces somewhat. Added a number of missing coercions and constructors to make things simpler and made sure that there is no loss in precision when converting to and from strings and JSON. Moved a number of timestamp and date members inline for speed.

2013-08-20  Kirit Saelensminde  <kirit@felspar.com>
 Added `fostlib::log::flush()` which blocks until the previous logged messages have been processed.

2013-06-07  Kirit Saelensminde  <kirit@felspar.com>
 The environment variable VERSION can now be used to specify an embedded version number in the result of fost-lib derived targets, or other shared libraries that make use of the <version> property.

2013-05-03  Kirit Saelensminde  <kirit@felspar.com>
 Make sure that the `fostlib::worker` can't leak an exception when it's destructed.

2013-03-10  Kirit Saelensminde  <kirit@felspar.com>
 Added the ability to set the log message module when using the logging DSL through a new `.module()` member on the log message builder.
 `fostlib::absorbException` has been deprecated in favour of `fostlib::absorb_exception`.
 `fostlib::replaceAll` has been deprecated in favour of `fostlib::replace_all`.

2013-03-03  Kirit Saelensminde  <kirit@felspar.com>
 Changed a couple of exceptions to put extended data into the JSON data rather than the free form text.

2013-03-03  Kirit Saelensminde  <kirit@felspar.com>
 Changed the `what()` implementation of `fostlib::exceptions::exception` to no longer write out more than one line (unless the info member of the exception does so). Also removed the settings for controlling the format of the `what()` string.

2013-02-23  Kirit Saelensminde  <kirit@felspar.com>
 Implemented better error detail for when a JSON array is accessed out of bounds.

2013-02-23  Kirit Saelensminde  <kirit@felspar.com>
 Refactored `FSL_CHECK_NEQ` so that it only evaluates it's arguments once.

2013-02-22  Kirit Saelensminde  <kirit@felspar.com>
 Moved the file specific functions into their own header. Now include `fost/file` rather than `fost/unicode` if you only need file handling APIs. Also added a `unique_filename` function suitable for generating temporary file names.

2013-02-08  Kirit Saelensminde  <kirit@felspar.com>
 Add a `directory_iterator` typedef which allows us to iterate over wpath based directory names across all supported versions of Boost.

2013-02-05  Kirit Saelensminde  <kirit@felspar.com>
 Initial simple progress meters allow progress from remote threads to be measured in a control thread.

2013-01-13  Kirit Saelensminde  <kirit@felspar.com>
 Implemented the file input operator for the `digester` so it is now possible to hash files on the file system.

2012-11-23  Kirit Saelensminde  <kirit@felspar.com>
 Added Boost Chrono to builds on Windows for Boost 1.47 and later.

2012-11-16  Kirit Saelensminde  <kirit@felspar.com>
 Removed the `workerqueue` as it doesn't do anything useful that a work pool doesn't already do.

2012-08-17  Kirit Saelensminde  <kirit@felspar.com>
 Removed a dead constructor that does nothing in `worker`.
 No longer pass on log messages captured during tests. This stops expected errors from being displayed and confusing the test results.
 Added a basic parser for the RFC1123 formatted dates used in protocols like SMTP and HTTP. Only the format produced by the Fost libraries is currently supported.

2012-08-08  Kirit Saelensminde  <kirit@felspar.com>
 The parser lock is now recursive. This means that we can be more aggressive about using it without causing deadlocks. Also removed the parser wrapper that doesn't take a lock so all uses are explicitly forced to acquire the lock at the right time.

2012-08-04  Kirit Saelensminde  <kirit@felspar.com>
 Deliberately leak the thread counter so that it can't be destructed before threads that are terminating in a global destructor get run.

2012-08-03  Kirit Saelensminde  <kirit@felspar.com>
 Added instrumentation for the number of worker threads in use. Also added decrement to the counter implementation.
 Fixed a bug on Windows where the pre-increment would return the old value rather than the new one.
 Dynamic loading of a library now tries with platform specific prefixes and suffixes before trying the name provided.

2012-08-02  Kirit Saelensminde  <kirit@felspar.com>
 Implement JSON casts for json::array_t and json::object_t.
 Allow the use of constant workers (and in_proc) which makes certain thread wrappers more obvious to implement.
 Implement futures with void type for worker and in_proc. We can still wait on them.
 Added startswith and endswith members to the string class.

2012-07-22  Kirit Saelensminde  <kirit@felspar.com>
 Allow time stamps and time differences to be added and subtracted.

2012-07-21  Kirit Saelensminde  <kirit@felspar.com>
 Made time stamps comparable and also added in a new timediff implementation based on the Boost library version.

2012-07-02  Kirit Saelensminde  <kirit@felspar.com>
 Silenced a clang warning that turns up under some circumstances.

2012-06-30  Kirit Saelensminde  <kirit@felspar.com>
 Added configuration for the log level for the stdout global logger.

2012-05-26  Kirit Saelensminde  <kirit@felspar.com>
 Changed the logging DSL for logging JSON objects thanks to suggestions from jeroen Vermeulen.

2012-04-16  Kirit Saelensminde  <kirit@felspar.com>
 Finally implemented the decode portion of base 64 support.
 Implemented a new logging DSL that makes it much simpler to create JSON objects in the log. Look at fost-base/Cpp/fost-core/log-tests.cpp for an example.

2012-04-08  Kirit Saelensminde  <kirit@felspar.com>
 Fixed up a problem where the crypto++ library wasn't installing properly on Windows.

2012-04-07  Kirit Saelensminde  <kirit@felspar.com>
 Renamed the fostlib::logging namespace to fostlib::log to make it shorter.

2012-03-03  Kirit Saelensminde  <kirit@felspar.com>
 Added coercions from fostlib::utf8_string.to std::vector<unsigned char>.
 Fixed up the JSON and string representations of the timestamps so they are more ISO like and have an explicit UTC time zone.

2012-03-02  Kirit Saelensminde  <kirit@felspar.com>
 Added coercions between fostlib::json and fostlib::jcursor.

2012-02-12  Kirit Saelensminde  <kirit@felspar.com>
 Made some minor changes suggested by clang, including some dead code elimination.

2012-01-30  Kirit Saelensminde  <kirit@felspar.com>
 MSVC 10 supports stdint.h so changed the configuration to use that.

2012-01-28  Kirit Saelensminde  <kirit@felspar.com>
 Fixed up the fost-exe build target type so the fost-cli library is properly installed.

2012-01-25  Kirit Saelensminde  <kirit@felspar.com>
 Explicitly initialise some variables that were set before being returned in order to silence a compiler warning.

2012-01-24  Kirit Saelensminde  <kirit@felspar.com>
 The parser lock can now be acquired before the parse is called so that it can be used to cover the building of the parser.

2012-01-15  Kirit Saelensminde  <kirit@felspar.com>
 Allow the logging functions to take up to four arguments.
 Allow string concatenation expressions with a narrow character literal to the left.

2012-01-09  Kirit Saelensminde  <kirit@felspar.com>
 Altered the internal cryptographic wrappers to use crypto++ instead of OpenSSL.

2011-10-27  Kirit Saelensminde  <kirit@felspar.com>
 Changed the unit testing so that it doesn't build a library any more.
 Refactored some build parameters to remove repetition.

2011-10-27  Kirit Saelensminde  <kirit@felspar.com>
 Changed the unit test runner so that it displays the output of the test run as we need to see this in order to verify that the tests do actually run.

2011-10-22  Kirit Saelensminde  <kirit@felspar.com>
 Clear out the jobs that have been taken from the queue when a major problem occurs. This should help to stop threads waiting on futures from waiting forever.

2011-10-21  Kirit Saelensminde  <kirit@felspar.com>
 Added fostlib::bytes for calculating the size of a memory block in bytes.

2011-10-09  Kirit Saelensminde  <kirit@felspar.com>
 Updated the readme files for later versions of Ubuntu.

2011-08-16  Kirit Saelensminde  <kirit@felspar.com>
 Changed some test logging messages so they don't look like real errors any more.

2011-07-28  Kirit Saelensminde  <kirit@felspar.com>
 Added support for Boost 1.46.

2011-04-10  Kirit Saelensminde  <kirit@felspar.com>
 Added a time logging function that logs any individual test that takes more than ten seconds to run.
 Added a timer to the datetime library which allows us to time how long parts of a program execution take.

2011-04-09  Kirit Saelensminde  <kirit@felspar.com>
 The insert functions for JSON values now use a coerce rather than a JSON constructor so the API will work with more data types.

2011-03-11  Kirit Saelensminde  <kirit@felspar.com>
 Updated the build system so that there is a new fost-integration-test target that will create a test executable that can be run at any later stage as well as run the tests during the build process.

2011-03-04  Kirit Saelensminde  <kirit@felspar.com>
 The jcursor constructor can now take up to four arguments and build a cursor path from them.

2011-02-10  Kirit Saelensminde  <kirit@felspar.com>
 JSON to JSON coercions are now supported and logging now accepts any parameter type which is coercable to JSON.

2010-11-16  Kirit Saelensminde  <kirit@felspar.com>
 Added a new basic logging library.

2010-11-09  Kirit Saelensminde  <kirit@felspar.com>
 The build system now supports installation based on the location set in the PREFIX envrionment variable. If the path is relative then it is relative to the location of the Jamroot file that is being built.

2010-11-05  Kirit Saelensminde  <kirit@felspar.com>
 Added a wrapper function for boost::spirit::parse which grabs a mutex forcing serialisation of the use of the parser to get around a threading bug in Spirit.

2010-11-02  Kirit Saelensminde  <kirit@felspar.com>
 Catching of incorrect exceptions in tests now shows the full text of the caught exception.

2010-10-01  Kirit Saelensminde  <kirit@felspar.com>
 Improved the display of exceptions by forcing them to use printOn.

2010-09-26  Kirit Saelensminde  <kirit@felspar.com>
 fostlib::string instances are now constructible from a wider range of iterators, including fostlib::string::const_iterator.

2010-09-19  Kirit Saelensminde  <kirit@felspar.com>
 Fixed a bug in coercion when going between nullable types.

2010-09-17  Kirit Saelensminde  <kirit@felspar.com>
 Data handling
 - Started to add in insert for JSON containers

2010-08-15  Kirit Saelensminde  <kirit@felspar.com>
 Data handling
 - Started adding a push_back function that allows consistent pushing back of data across a wide range of types. Currently supports std::list, std::vector and fostlib::json.

2010-04-28  Kirit Saelensminde  <kirit@felspar.com>
 Threading
 - Added accessors to future so that we can see if there is an exception or a if future (result) is available.

2010-04-28  Kirit Saelensminde  <kirit@felspar.com>
 Basic library handling
 - Added fost/relops.hpp and started to use it to remove a lot of duplicated code.

2010-04-28  Kirit Saelensminde  <kirit@felspar.com>
 Logging
 - Added a YAML record class for outputting YAML log records.

2010-04-06  Kirit Saelensminde  <kirit@felspar.com>
 Parsers
 - Removed the parser instances because they're not thread safe.

2010-04-01  Kirit Saelensminde  <kirit@felspar.com>
 Exception handling
 - Allow us to throw not implemented exceptions based on Boost system errors.

2010-03-29  Kirit Saelensminde  <kirit@felspar.com>
 String handling
 - Added coercion from string::hex_string to std::size_t

2010-03-22  Kirit Saelensminde  <kirit@felspar.com>
 ChangeLog
 - Added ChangeLog
